//
// Group
//
// Used to combine various controls together

@if $generate-component-classes {
  // Group addons
  .addon {
    @extend %controls;
    display: flex; // override %controls style to use align-items
    user-select: auto; // allow user to select text inside addon
    align-items: center; // Center align content in addon
    border-color: $group-addon-bordercolor;
    background-color: $group-addon-background;
  }

  //
  // Base styles
  //
  // stylelint-disable-next-line no-duplicate-selectors
  .group {
    display: flex;
    flex-wrap: wrap;

    &.is-lg {
      > .addon,
      > .btn {
        padding: $group-lg-padding-y $group-lg-padding-x;
      }

      .input {
        padding-top: $group-lg-padding-y;
        padding-bottom: $group-lg-padding-y;
      }
    }

    > .input,
    > .control,
    > .addon,
    > .btn {
      @include hover-focus {
        z-index: $group-items-hover-focus-zindex;
      }
    }

    > .input,
    > .control:not(.addon) {
      flex: 1 1 0%; // expand to max space available without overflow from group
    }

    &:not(.is-y) {
      margin-right: $controls-borderwidth / 2;
      margin-left: $controls-borderwidth / 2;

      > .control {
        @extend %group-margin-x;

        > .input {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-0;
          }
        }

        &:first-child > .input:not(.is-min) {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-left;
          }
        }

        &:last-child > .input:not(.is-min) {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-right;
          }
        }
      }

      > .input,
      > .addon,
      > .btn {
        @extend %group-margin-x;
        @if $design-rounded-or-sharp == "rounded" {
          @extend %group-borderradius-0;
        }

        &:first-child:not(.is-min) {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-left;
          }
        }

        &:last-child:not(.is-min) {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-right;
          }
        }
      }
    }

    &.is-y {
      margin-top: $controls-borderwidth / 2;
      margin-bottom: $controls-borderwidth / 2;

      > .control {
        @extend %group-margin-y;

        > .input {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-0;
          }
        }

        &:first-child > .input:not(.is-min) {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-top;
          }
        }

        &:last-child > .input:not(.is-min) {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-bottom;
          }
        }
      }

      > .input,
      > .addon,
      > .btn {
        @extend %group-margin-y;
        @if $design-rounded-or-sharp == "rounded" {
          @extend %group-borderradius-0;
        }

        &:first-child:not(.is-min) {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-top;
          }
        }

        &:last-child:not(.is-min) {
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-bottom;
          }
        }
      }
    }

    &.is-borderless {
      &:not(.is-y) {
        > .control {
          > .input {
            @extend %group-border-y-0;
            @if $design-rounded-or-sharp == "rounded" {
              @extend %group-borderradius-0;
            }
          }

          &:first-child > .input {
            @extend %group-border-left-0;
          }

          &:last-child > .input {
            @extend %group-border-right-0;
          }
        }

        > .input,
        > .addon,
        > .btn {
          @extend %group-border-y-0;
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-0;
          }

          &:first-child {
            @extend %group-border-left-0;
          }

          &:last-child {
            @extend %group-border-right-0;
          }
        }
      }

      &.is-y {
        > .control {
          > .input {
            @extend %group-border-x-0;
            @if $design-rounded-or-sharp == "rounded" {
              @extend %group-borderradius-0;
            }
          }

          &:first-child > .input {
            @extend %group-border-top-0;
          }

          &:last-child > .input {
            @extend %group-border-bottom-0;
          }
        }

        > .input,
        > .addon,
        > .btn {
          @extend %group-border-x-0;
          @if $design-rounded-or-sharp == "rounded" {
            @extend %group-borderradius-0;
          }

          &:first-child {
            @extend %group-border-top-0;
          }

          &:last-child {
            @extend %group-border-bottom-0;
          }
        }
      }
    }
  }

  .group.buttons {
    display: inline-flex; // override display property for buttons group
  }
}
